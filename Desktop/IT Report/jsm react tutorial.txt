inline styles have higher preference and specificity over all other styling in react.

State is like a react's component's brain,

in more complex interfaces, it is not recommended to update the value of the state by using the state itself. Create another callback fxn without the setter state call to get access to the previous version of that state

use a dependency array to change the use effect when 


"

import { useState, useEffect } from "react";
/*import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { byPrefixAndName } from '@awesome.me/kit-KIT_CODE/icons'*/

const Card = ({ title }) => {
  const [count, setCount] = useState(0);
  const [hasLiked, setHasLiked] = useState(false);

  useEffect( () => {
    console.log(`${title} has been liked: ${hasLiked}`);
  }, [hasLiked]);

  /*useEffect( () => {
    console.log('CARD RENDERED');
    
  }, []);*/
  return (
    <div className="card" onClick={() => setCount(count + 1)}>
      <h2>{title} <br /> {count || null}</h2>


      <button onClick={() => setHasLiked(!hasLiked)}>
        {hasLiked ? "‚ù§Ô∏è" : "ü§ç"}
        
      </button>
    </div>
  );
};

const App = () => {
  return (
    <div className="card-container">
      <Card title="Nollywood" rating={5} />
      <Card title="Hollywood" />
      <Card title="Bollywood" />
      <Card title="Asabawood" />
      
    </div>
  );
};

export default App;

"
52:13